data2=data[-remove,]
gee1=geem(y ~ X+Z, id=id, data=data2, corstr="independence",
family=binomial)
gee2=geem(y ~ X+Z, id=id, data=data2, corstr="exchangeable",
family=binomial)
se1=summary(gee1)$se.robust
se2=summary(gee2)$se.robust
ARE=(se2/se1)^2
return(ARE)
}
set.seed(323)
result2=matrix(0,6,3)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
n
source('~/.active-rstudio-document')
set.seed(0)
set=sort(sample(1:n,n/2,replace = FALSE))
remove=NULL
for(i in 1:(n/2)){
remove=c(remove,c(ni*(set[i]-1)+4,ni*(set[i]-1)+5,ni*(set[i]-1)+6))
}
remove
set.seed(0)
indice = sample(1:n, n/2,replace = FALSE)
a=c((indice - 1) * 6 + 4, (indice - 1) * 6 + 5, indice * 6)
a
sort(a)
remove
AREMisD=function(t,ni=6,sigma,beta0=-2.5,beta1=1,beta2=1){
n=20*t
#covariates for cluster i, xij j=1,...,6
data=data.frame(X=rep((-2:3) / 3, n), Z=rep(c(0, 1), each=3 * n),
y=rep(0, 6 * n), id=rep(1:n, each=6))
bi = rep(rep(sigma * qnorm(ppoints(20)), each=6), n / 20)
for(i in 1:(6 * n)){
pij = logitInv(beta0 + bi[i] + beta1* data$X[i] + beta2 * data$Z[i])
data$y[i] = sample(c(1, 0), 1, prob=c(pij, 1-pij))
}
#collect indices that need to be removed
#indices for half of the clusters
set=sort(sample(1:n,n/2,replace = FALSE))
remove=NULL
for(i in 1:(n/2)){
remove=c(remove,c(ni*(set[i]-1)+4,ni*(set[i]-1)+5,ni*(set[i]-1)+6))
}
#indice = sample(1:n, n/2,replace = FALSE)
#remove=c((indice - 1) * 6 + 4, (indice - 1) * 6 + 5, indice * 6)
data2=data[-remove,]
gee1=geem(y ~ X+Z, id=id, data=data2, corstr="independence",
family=binomial)
gee2=geem(y ~ X+Z, id=id, data=data2, corstr="exchangeable",
family=binomial)
se1=summary(gee1)$se.robust
se2=summary(gee2)$se.robust
ARE=(se2/se1)^2
return(ARE)
}
set.seed(323)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
remove
a
sort(a)
remove
data
data=data.frame(X=rep((-2:3) / 3, n), Z=rep(c(0, 1), each=3 * n),
y=rep(0, 6 * n), id=rep(1:n, each=6))
bi = rep(rep(sigma * qnorm(ppoints(20)), each=6), n / 20)
for(i in 1:(6 * n)){
pij = logitInv(beta0 + bi[i] + beta1* data$X[i] + beta2 * data$Z[i])
data$y[i] = sample(c(1, 0), 1, prob=c(pij, 1-pij))
}
data
data[-remove,]
data[-a,]
sum(data[-a,]!=data[-remove,])
AREMisD=function(t,ni=6,sigma,beta0=-2.5,beta1=1,beta2=1){
n=20*t
#covariates for cluster i, xij j=1,...,6
data=data.frame(X=rep((-2:3) / 3, n), Z=rep(c(0, 1), each=3 * n),
y=rep(0, 6 * n), id=rep(1:n, each=6))
bi = rep(rep(sigma * qnorm(ppoints(20)), each=6), n / 20)
for(i in 1:(6 * n)){
pij = logitInv(beta0 + bi[i] + beta1* data$X[i] + beta2 * data$Z[i])
data$y[i] = sample(c(1, 0), 1, prob=c(pij, 1-pij))
}
#collect indices that need to be removed
#indices for half of the clusters
set=sample(1:n,n/2,replace = FALSE)
remove=NULL
for(i in 1:(n/2)){
remove=c(remove,c(ni*(set[i]-1)+4,ni*(set[i]-1)+5,ni*(set[i]-1)+6))
}
#indice = sample(1:n, n/2,replace = FALSE)
#remove=c((indice - 1) * 6 + 4, (indice - 1) * 6 + 5, indice * 6)
data2=data[-remove,]
gee1=geem(y ~ X+Z, id=id, data=data2, corstr="independence",
family=binomial)
gee2=geem(y ~ X+Z, id=id, data=data2, corstr="exchangeable",
family=binomial)
se1=summary(gee1)$se.robust
se2=summary(gee2)$se.robust
ARE=(se2/se1)^2
return(ARE)
}
set.seed(323)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
AREMisD=function(t,ni=6,sigma,beta0=-2.5,beta1=1,beta2=1){
n=20*t
#covariates for cluster i, xij j=1,...,6
data=data.frame(X=rep((-2:3) / 3, n), Z=rep(c(0, 1), each=3 * n),
y=rep(0, 6 * n), id=rep(1:n, each=6))
bi = rep(rep(sigma * qnorm(ppoints(20)), each=6), n / 20)
for(i in 1:(6 * n)){
pij = logitInv(beta0 + bi[i] + beta1* data$X[i] + beta2 * data$Z[i])
data$y[i] = sample(c(1, 0), 1, prob=c(pij, 1-pij))
}
#collect indices that need to be removed
#indices for half of the clusters
set=sample(1:n,n/2,replace = FALSE)
#   remove=NULL
#   for(i in 1:(n/2)){
#     remove=c(remove,c(ni*(set[i]-1)+4,ni*(set[i]-1)+5,ni*(set[i]-1)+6))
#   }
remove=c((set - 1) * 6 + 4, (set - 1) * 6 + 5, set * 6)
#indice = sample(1:n, n/2,replace = FALSE)
#remove=c((indice - 1) * 6 + 4, (indice - 1) * 6 + 5, indice * 6)
data2=data[-remove,]
gee1=geem(y ~ X+Z, id=id, data=data2, corstr="independence",
family=binomial)
gee2=geem(y ~ X+Z, id=id, data=data2, corstr="exchangeable",
family=binomial)
se1=summary(gee1)$se.robust
se2=summary(gee2)$se.robust
ARE=(se2/se1)^2
return(ARE)
}
result2=matrix(0,6,3)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
set.seed(1224)
sig=c(0.5,1,1.5,2,2.5,3)
result2=matrix(0,6,3)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
set.seed(1022)
sig=c(0.5,1,1.5,2,2.5,3)
result2=matrix(0,6,3)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
pef=seq(0,1,length.out=100)
pinef=matrix(0,100,5)
AREp=c(0.1,0.3,0.5,0.7,0.9)
alpha=0.05
for(i in 1:5){
are=AREp[i]
a=(1-sqrt(are))*qnorm(1-alpha)+sqrt(are)*qnorm(1-pef)
pinef[,i]=1-pnorm(a)
}
pinef
plot(pef,pinef[,1],type="l",lty=1,lwd=2,xlab="Power of the efficient analysis",
ylab="Power of the inefficient analysis",main="alpha=0.05")
lines(pef,pinef[,2],lty=2,lwd=2)
lines(pef,pinef[,3],lty=3,lwd=2)
lines(pef,pinef[,4],lty=4,lwd=2)
lines(pef,pinef[,5],lty=5,lwd=2)
legend(0,1,c("ARE=0.1","ARE=0.3","ARE=0.5","ARE=0.7","ARE=0.9"),lty=c(1,2,3,4,5),lwd=2)
alpha=1e-6
for(i in 1:5){
are=AREp[i]
a=(1-sqrt(are))*qnorm(1-alpha)+sqrt(are)*qnorm(1-pef)
pinef[,i]=1-pnorm(a)
}
lines(pef,pinef[,1],type="l",lty=1,lwd=2,xlab="Power of the efficient analysis",
ylab="Power of the inefficient analysis",main="alpha=1e-6",color="red")
lines(pef,pinef[,1],type="l",lty=1,lwd=2,xlab="Power of the efficient analysis",
ylab="Power of the inefficient analysis",main="alpha=1e-6",color=red)
lines(pef,pinef[,1],type="l",lty=1,lwd=2,xlab="Power of the efficient analysis",
ylab="Power of the inefficient analysis",main="alpha=1e-6",col="red")
lines(pef,pinef[,2],lty=2,lwd=2,col="red")
lines(pef,pinef[,3],lty=3,lwd=2,col="red")
lines(pef,pinef[,4],lty=4,lwd=2,col="red")
lines(pef,pinef[,5],lty=5,lwd=2,col="red")
ARE=function(t,ni=6,sigma=1,beta0=-2.5,beta1=1,beta2=1){
n=20*t
#covariates for cluster i, xij j=1,...,6
xi=numeric(6)
for(j in 1:6){
xi[j]=(j-3)/3
}
X=rep(xi,n)
Z=c(rep(0,n/2*ni),rep(1,n/2*ni))
id=rep(1:n,each=ni)
#
y=numeric(n*ni)
bi=sigma*qnorm(ppoints(20))
ind=rep(1:20,n/20)
for (i in 1:n){
r=ind[i]
pij=logitInv(beta0+bi[r]+beta1*xi+beta2*Z[ni*i])
for (j in 1:ni){
y[ni*(i-1)+j]=sample(c(1,0),1,prob=c(pij[j],1-pij[j]))
}
}
data=data.frame(y,X,Z,id)
gee1=gee(as.factor(y) ~ X+Z, id=id, data=data, corstr="independence",
family=binomial(link ="logit"))
gee2=gee(as.factor(y) ~ X+Z, id=id, data=data, corstr="exchangeable",
family=binomial(link ="logit"))
b0se_1=coef(summary(gee1))[1,4]
b1se_1=coef(summary(gee1))[2,4]
b2se_1=coef(summary(gee1))[3,4]
b0se_2=coef(summary(gee2))[1,4]
b1se_2=coef(summary(gee2))[2,4]
b2se_2=coef(summary(gee2))[3,4]
#ARE=c((b0se_1/b0se_2)^2,(b1se_1/b1se_2)^2,(b2se_1/b2se_2)^2)
ARE=c((b0se_2/b0se_1)^2,(b1se_2/b1se_1)^2,(b2se_2/b2se_1)^2)
return(ARE)
}
ARE=function(t,ni=6,sigma=1,beta0=-2.5,beta1=1,beta2=1){
n=20*t
#covariates for cluster i, xij j=1,...,6
xi=numeric(6)
for(j in 1:6){
xi[j]=(j-3)/3
}
X=rep(xi,n)
Z=c(rep(0,n/2*ni),rep(1,n/2*ni))
id=rep(1:n,each=ni)
#
y=numeric(n*ni)
bi=sigma*qnorm(ppoints(20))
ind=rep(1:20,n/20)
for (i in 1:n){
r=ind[i]
pij=logitInv(beta0+bi[r]+beta1*xi+beta2*Z[ni*i])
for (j in 1:ni){
y[ni*(i-1)+j]=sample(c(1,0),1,prob=c(pij[j],1-pij[j]))
}
}
data=data.frame(y,X,Z,id)
gee1=gee(as.factor(y) ~ X+Z, id=id, data=data, corstr="independence",
family=binomial(link ="logit"))
gee2=gee(as.factor(y) ~ X+Z, id=id, data=data, corstr="exchangeable",
family=binomial(link ="logit"))
b0se_1=coef(summary(gee1))[1,4]
b1se_1=coef(summary(gee1))[2,4]
b2se_1=coef(summary(gee1))[3,4]
b0se_2=coef(summary(gee2))[1,4]
b1se_2=coef(summary(gee2))[2,4]
b2se_2=coef(summary(gee2))[3,4]
#ARE=c((b0se_1/b0se_2)^2,(b1se_1/b1se_2)^2,(b2se_1/b2se_2)^2)
ARE=c((b0se_2/b0se_1)^2,(b1se_2/b1se_1)^2,(b2se_2/b2se_1)^2)
return(ARE)
}
sig=c(0.5,1,1.5,2,2.5,3)
result=matrix(0,6,3)
set.seed(1224)
for (i in 1:6){
result[i,]=ARE(t=500,ni=6,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result,digits=2)
AREMisD=function(t,ni=6,sigma,beta0=-2.5,beta1=1,beta2=1){
n=20*t
#covariates for cluster i, xij j=1,...,6
xi=numeric(6)
for(j in 1:6){
xi[j]=(j-3)/3
}
X=rep(xi,n)
Z=c(rep(0,n/2*ni),rep(1,n/2*ni))
id=rep(1:n,each=ni)
#
y=numeric(n*ni)
bi=sigma*qnorm(ppoints(20))
ind=rep(1:20,n/20)
for (i in 1:n){
r=ind[i]
pij=logitInv(beta0+bi[r]+beta1*xi+beta2*Z[ni*i])
for (j in 1:ni){
y[ni*(i-1)+j]=sample(c(1,0),1,prob=c(pij[j],1-pij[j]))
}
}
data=data.frame(y,X,Z,id)
#collect indices that need to be removed
#indices for half of the clusters
set=sample(1:n,n/2,replace = FALSE)
remove=c((set - 1) * 6 + 4, (set - 1) * 6 + 5, set * 6)
data2=data[-remove,]
gee1=geem(y ~ X+Z, id=id, data=data2, corstr="independence",
family=binomial)
gee2=geem(y ~ X+Z, id=id, data=data2, corstr="exchangeable",
family=binomial)
se1=summary(gee1)$se.robust
se2=summary(gee2)$se.robust
ARE=(se2/se1)^2
return(ARE)
}
set.seed(1022)
sig=c(0.5,1,1.5,2,2.5,3)
result2=matrix(0,6,3)
for (i in 1:6){
result2[i,]=AREMisD(t=500,ni=3,sigma=sig[i],beta0=-2.5,beta1=1,beta2=1)
}
xtable(result2,digits=2)
# d
u <- seq(-3, 3, 0.01)
t <- ifelse(u < -1, -u + 2, -u - 2)
g = data.frame(u = u, t = t)
ggplot()+
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1)
l
library(ggplot )
library(ggplot2 )
# d
u <- seq(-3, 3, 0.01)
t <- ifelse(u < -1, -u + 2, -u - 2)
g = data.frame(u = u, t = t)
ggplot()+
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1)
u <- seq(-3, 3, 0.01)
t <- (-u + 1) ^ 3
g = data.frame(u = u, t = t)
ggplot() +
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1)
u <- seq(1, 2, 0.01)
t <- (-u + 1) ^ 3
g = data.frame(u = u, t = t)
ggplot() +
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1) +
geom_ribbon(aes(x=c(0, 1), ymin=0, ymax=Inf), fill="grey", alpha = 1) +
ylim(-1, 1)
# d
u <- seq(-3, 3, 0.01)
t <- ifelse(u < -1, -u + 2, -u - 2)
g = data.frame(u = u, t = t)
ggplot()+
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1)
# e
u <- seq(-3, 3, 0.01)
t <- (-u + 1) ^ 3
g = data.frame(u = u, t = t)
ggplot() +
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1)
u <- seq(1, 2, 0.01)
t <- (-u + 1) ^ 3
g = data.frame(u = u, t = t)
ggplot() +
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1) +
geom_ribbon(aes(x=c(0, 1), ymin=0, ymax=Inf), fill="grey", alpha = 1) +
ylim(-1, 1)
library(ggplot2)
u <- seq(-3, 3, 0.01)
t <- ifelse(u < -1, -u + 2, -u - 2)
g = data.frame(u = u, t = t)
ggplot()+
geom_line(aes(x=u, y=t)) +
geom_ribbon(aes(x=u, ymin=t, ymax=Inf), fill="grey", alpha = 1)
rnorm(0,1,2)
rnorm(1,1,2)
rnorm(1,c(1,10),2)
rnorm(1,c(1,10),2)
rnorm(2,c(1,10),2)
rnorm(2,c(1,10),2)
rnorm(2,c(1,10),2)
rnorm?
?rnorm
library(convexjulia)
julia.call <- "/Applications/Julia-0.4.3.app/Contents/Resources/julia/bin/julia"
library(convexjulia)
library(convexjulia)
library(geeM)
library(lme4)
dataGen=function(N,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5){
X=numeric(3*N)
y=numeric(3*N)
t=rep(1:3,N)
id=rep(1:N,each=3)
for (i in 1:N){
ind=(3*(i-1)+1):(3*i)
a=sample(c(0,1),1)
X[ind]=rep(a,3)
b=rnorm(1,0,sigb)
mu=b0+b+b1*c(1,2,3)+b2*a
y[ind]=rnorm(3,mu,sigy)
}
data=data.frame(y,X,t,id)
wide=reshape(data,timevar ="t",idvar=c("X","id"), direction ="wide")
for(i in 1:N){
for(j in 1:2){
if (wide[i,2+j]<(-1)){
Ind=(3+j):5
wide[i,Ind]=NA
break
}
}
}
dataM=reshape(wide,varying=list(3:5),direction='long',v.names='y',times=c(1,2,3))
dataM=dataM[order(dataM$id),]
names(dataM)[3]="t"
return(list("dataC"=data,"dataM"=dataM))
}
data=dataGen(N=1000)$dataM
gee1=geem(y~t+X,id=id,data=data,corstr="exchangeable")
summary(gee1)
gee1=geem(y~t+X,id=id,data=data,corstr="independence")
summary(gee1)
onerun=function(N,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5){
data=dataGen(N)$dataM
#gee
lm=geem(y~t+X,id=id,data=data,corstr="independence")
beta=summary(lm)$beta[-1]
se=summary(lm)$se.robust[-1]
CI=cbind(beta-se*qnorm(0.975),beta+se*qnorm(0.975))
#lmm
lm2=lmer(y~t+X+(1|id),data=data)
beta2=coef(summary(lm2))[2:3,1]
se2=coef(summary(lm2))[2:3,2]
CI2=cbind(beta2-se2*qnorm(0.975),beta2+se2*qnorm(0.975))
re=numeric(4)
re[1]=(b1<=CI[1,2] & b1>=CI[1,1])
re[2]=(b2<=CI[2,2] & b2>=CI[2,1])
re[3]=(b1<=CI2[1,2] & b1>=CI2[1,1])
re[4]=(b2<=CI2[2,2] & b2>=CI2[2,1])
return(c(re,beta,beta2))
}
onerun(N=1000,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5)
onerun(N=1000,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5)
onerun(N=1000,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5)
onerun(N=1000,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5)
set.seed(1022)
s=replicate(1000,onerun(N=1000,sigb=1,sigy=0.5,b0=1,b1=-1,b2=0.5))
?vapply
?fivenum
fivenum(c(1,2,3))
?filter
?map
?Map
?weighted.mean
?Filter
Filter(function(x){x>1},c(1,2,3))
3*sqrt(121)/15
aa=function(q,w){
return(q+w)
}
aa(1,2)
?tapply
lapply
?laaply
?laply
?lapply
library(car)
data(car)
x=seq(1:10,3)
x=seq(1:10,length.out = 20)
x=seq(1:10,length.out = 20)
x=seq(1,10,length.out = 20)
y=seq(20,30,length.out = 20)
lm = lm(y ~x)
anova(lm)
library (xtable)
xtable(anova)
xtable(anova(lm))
setwd("~/Dropbox/512project")
setwd("~/Dropbox/512project/data")
siteData=read.csv("siteData.csv")
siteData
siteData$Year==2014
siteData$Year==2014 ||siteData$Year==2015
siteData$Year==2014 |siteData$Year==2015
siteData[siteData$Year==2014,]$xcoor
siteData[siteData$Year==2014,]$xcoor=
siteData[siteData$Year==2014,]$xcoor+3
siteData[siteData$Year==2015,]$xcoor=
siteData[siteData$Year==2015,]$xcoor+6
siteData[siteData$Year==2015,]$xcoor
read.csv(siteData."siteData.csv")
write.csv(siteData."siteData.csv")
write.csv(siteData,"siteData.csv")
Fposition=read.csv("Fposition.csv")
Fposition
Fposition[Fposition$Year==2014,]$xcoor
Fposition$Year==2014
Fposition$Year
Fposition[Fposition$year==2014,]$xcoor=
Fposition[Fposition$year==2014,]$xcoor
Fposition[Fposition$year==2014,]$xcoor=
Fposition[Fposition$year==2014,]$xcoor+3
Fposition[Fposition$year==2015,]$xcoor=
Fposition[Fposition$year==2015,]$xcoor+6
write.csv(Fposition,"Fposition.csv")
